[main] INFO soot.jimple.infoflow.taintWrappers.EasyTaintWrapper - Loaded wrapper entries for 52 classes and 4 exclusions.
[main] INFO soot.jimple.infoflow.Infoflow - Resetting Soot...
Warning: java.lang.NoClassDefFoundError is a phantom class!
Warning: java.lang.StringBuffer is a phantom class!
Warning: java.lang.Boolean is a phantom class!
Warning: java.lang.Long is a phantom class!
Warning: java.lang.Integer is a phantom class!
Warning: java.lang.Short is a phantom class!
Warning: java.lang.Float is a phantom class!
Warning: java.lang.Double is a phantom class!
Warning: java.lang.Throwable is a phantom class!
Warning: java.lang.Class is a phantom class!
Warning: java.lang.Character is a phantom class!
Warning: java.lang.AssertionError is a phantom class!
Warning: java.lang.Byte is a phantom class!
Warning: java.lang.Void is a phantom class!
Warning: java.lang.ClassFormatError is a phantom class!
Warning: java.lang.InstantiationError is a phantom class!
Warning: java.lang.Runnable is a phantom class!
Warning: java.lang.ref.Finalizer is a phantom class!
Warning: java.lang.IncompatibleClassChangeError is a phantom class!
Warning: java.lang.NoSuchFieldError is a phantom class!
Warning: java.lang.StackOverflowError is a phantom class!
Warning: java.lang.Thread is a phantom class!
Warning: java.lang.IllegalAccessError is a phantom class!
Warning: java.lang.ArrayStoreException is a phantom class!
Warning: java.lang.NoSuchMethodError is a phantom class!
Warning: java.lang.LinkageError is a phantom class!
Warning: java.lang.ExceptionInInitializerError is a phantom class!
Warning: java.lang.InternalError is a phantom class!
Warning: java.lang.VerifyError is a phantom class!
Warning: java.io.Serializable is a phantom class!
Warning: java.lang.ArrayIndexOutOfBoundsException is a phantom class!
Warning: java.lang.ClassCastException is a phantom class!
Warning: java.lang.ArithmeticException is a phantom class!
Warning: java.lang.IndexOutOfBoundsException is a phantom class!
Warning: java.lang.AbstractMethodError is a phantom class!
Warning: java.lang.Object is a phantom class!
Warning: java.lang.ThreadDeath is a phantom class!
Warning: java.lang.String is a phantom class!
Warning: java.lang.UnknownError is a phantom class!
Warning: java.lang.ClassCircularityError is a phantom class!
Warning: java.lang.Cloneable is a phantom class!
Warning: java.lang.NegativeArraySizeException is a phantom class!
Warning: java.lang.UnsatisfiedLinkError is a phantom class!
Warning: java.lang.Error is a phantom class!
Warning: java.lang.OutOfMemoryError is a phantom class!
Warning: java.lang.IllegalMonitorStateException is a phantom class!
Warning: java.lang.RuntimeException is a phantom class!
Warning: java.lang.NullPointerException is a phantom class!
Warning: java.lang.ClassNotFoundException is a phantom class!
[main] INFO soot.jimple.infoflow.Infoflow - Basic class loading done.
[main] ERROR soot.jimple.infoflow.Infoflow - Only phantom classes loaded, skipping analysis...
Warning: soot.jimple.infoflow.test.Test1 is a phantom class!
[main] WARN soot.jimple.infoflow.entryPointCreators.DefaultEntryPointCreator - Could not find a suitable constructor for class soot.jimple.infoflow.test.Test1
[main] WARN soot.jimple.infoflow.entryPointCreators.DefaultEntryPointCreator - Cannot generate constructor for class: soot.jimple.infoflow.test.Test1
Warning: com.swabunga.spell.swing.JSpellForm is a phantom class!
[main] WARN soot.jimple.infoflow.entryPointCreators.DefaultEntryPointCreator - Could not find a suitable constructor for class com.swabunga.spell.swing.JSpellForm
[main] WARN soot.jimple.infoflow.entryPointCreators.DefaultEntryPointCreator - Cannot generate constructor for class: com.swabunga.spell.swing.JSpellForm
Warning: java.io.InputStream is a phantom class!
Warning: java.io.BufferedReader is a phantom class!
Warning: java.io.PrintStream is a phantom class!
Warning: java.io.InputStreamReader is a phantom class!
Warning: java.lang.System is a phantom class!
Warning: java.lang.Exception is a phantom class!
Warning: java.io.Reader is a phantom class!
Warning: java.security.AccessControlException is a phantom class!
Warning: java.lang.InstantiationException is a phantom class!
Warning: java.lang.IllegalAccessException is a phantom class!
Warning: java.io.FileOutputStream is a phantom class!
Warning: java.util.Properties is a phantom class!
Warning: java.lang.ClassLoader is a phantom class!
Warning: java.io.IOException is a phantom class!
Warning: java.net.URL is a phantom class!
Warning: java.io.File is a phantom class!
Warning: java.io.OutputStream is a phantom class!
Warning: java.io.FileNotFoundException is a phantom class!
[main] WARN soot.jimple.infoflow.entryPointCreators.DefaultEntryPointCreator - Entry point not found: <soot.jimple.infoflow.test.Test1: void main(java.lang.String[])>
[main] WARN soot.jimple.infoflow.entryPointCreators.DefaultEntryPointCreator - Entry point not found: <com.swabunga.spell.swing.JSpellForm: void main(java.lang.String[])>
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.7 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 0.1 seconds.
[Spark] Solution found in 0.1 seconds.
[main] INFO soot.jimple.infoflow.Infoflow - Callgraph has 52 edges
[main] INFO soot.jimple.infoflow.Infoflow - Looking for sources and sinks...
@Suresh : <dummyMainClass: void dummyMainMethod()>
@Suresh : <com.swabunga.spell.engine.EditDistance: void <clinit>()>
@Suresh : <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
@Suresh : <com.swabunga.spell.engine.Configuration: com.swabunga.spell.engine.Configuration getConfiguration()>
@Suresh : <com.swabunga.spell.engine.EditDistance: int getDistance(java.lang.String,java.lang.String,int[][])>
@Suresh : <com.swabunga.spell.engine.Configuration: com.swabunga.spell.engine.Configuration getConfiguration(java.lang.String)>
@Suresh : <com.swabunga.spell.engine.EditDistance: int minimum(int,int,int,int,int)>
@Suresh : <com.swabunga.spell.engine.EditDistance: boolean equalIgnoreCase(char,char)>
@Suresh : <com.swabunga.spell.engine.PropertyConfiguration: void <init>()>
@Suresh : <com.swabunga.spell.engine.Configuration: void <init>()>
@Suresh : <com.swabunga.spell.engine.PropertyConfiguration: int getInteger(java.lang.String)>
@Suresh : <com.swabunga.spell.engine.EditDistance: void <init>()>
[main] INFO soot.jimple.infoflow.Infoflow - Source lookup done, found 2 sources and 3 sinks.
[main] INFO soot.jimple.infoflow.Infoflow - Taint wrapper hits: 42
[main] INFO soot.jimple.infoflow.Infoflow - Taint wrapper misses: 24489
[main] INFO soot.jimple.infoflow.Infoflow - IFDS problem with 312330 forward and 184412 backward edges solved, processing results...
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Obtainted 15 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 1
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 2
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 3
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 4
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 5
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 6
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 7
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 8
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 9
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 10
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 11
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 12
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 13
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 14
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 15
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Path processing took 0.168977705 seconds in total for 19158 edges
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Running path extension on 2 roots
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Path extension took 0.537487406 seconds.
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Path proecssing took 0.541163933 seconds in total
[main] INFO soot.jimple.infoflow.Infoflow - The sink virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("done") in method <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - l4 = virtualinvoke l1.<java.io.BufferedReader: java.lang.String readLine()>() in method <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> l4 = virtualinvoke l1.<java.io.BufferedReader: java.lang.String readLine()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if l4 == null goto $r3 = <java.lang.System: java.io.PrintStream out>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke $r4.<java.io.PrintStream: void println(int)>($i2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = <java.lang.System: java.io.PrintStream out>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("done")
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("done")
[main] INFO soot.jimple.infoflow.Infoflow - - l3 = virtualinvoke l1.<java.io.BufferedReader: java.lang.String readLine()>() in method <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> l3 = virtualinvoke l1.<java.io.BufferedReader: java.lang.String readLine()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if l3 == null goto $r3 = <java.lang.System: java.io.PrintStream out>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke $r4.<java.io.PrintStream: void println(int)>($i2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = <java.lang.System: java.io.PrintStream out>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("done")
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("done")
[main] INFO soot.jimple.infoflow.Infoflow - The sink virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11) in method <com.swabunga.spell.engine.PropertyConfiguration: void <init>()> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - l4 = virtualinvoke l1.<java.io.BufferedReader: java.lang.String readLine()>() in method <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> l4 = virtualinvoke l1.<java.io.BufferedReader: java.lang.String readLine()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if l4 == null goto $r3 = <java.lang.System: java.io.PrintStream out>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i2 = staticinvoke <com.swabunga.spell.engine.EditDistance: int getDistance(java.lang.String,java.lang.String,int[][])>(l3, l4, l2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void <clinit>()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r0 = staticinvoke <com.swabunga.spell.engine.Configuration: com.swabunga.spell.engine.Configuration getConfiguration()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.Configuration: com.swabunga.spell.engine.Configuration getConfiguration()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> l0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("jazzy.config")
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.Configuration: com.swabunga.spell.engine.Configuration getConfiguration()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if l0 == null goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.Configuration: com.swabunga.spell.engine.Configuration getConfiguration()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r0 = staticinvoke <com.swabunga.spell.engine.Configuration: com.swabunga.spell.engine.Configuration getConfiguration(java.lang.String)>(null)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.Configuration: com.swabunga.spell.engine.Configuration getConfiguration(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke $r0.<com.swabunga.spell.engine.PropertyConfiguration: void <init>()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.PropertyConfiguration: void <init>()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke $r7.<java.lang.StringBuffer: void <init>()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.PropertyConfiguration: void <init>()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not load Properties file :\n")
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.PropertyConfiguration: void <init>()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(l1#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.PropertyConfiguration: void <init>()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.PropertyConfiguration: void <init>()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.PropertyConfiguration: void <init>()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11)
[main] INFO soot.jimple.infoflow.Infoflow - - l3 = virtualinvoke l1.<java.io.BufferedReader: java.lang.String readLine()>() in method <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> l3 = virtualinvoke l1.<java.io.BufferedReader: java.lang.String readLine()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if l3 == null goto $r3 = <java.lang.System: java.io.PrintStream out>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i2 = staticinvoke <com.swabunga.spell.engine.EditDistance: int getDistance(java.lang.String,java.lang.String,int[][])>(l3, l4, l2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void <clinit>()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r0 = staticinvoke <com.swabunga.spell.engine.Configuration: com.swabunga.spell.engine.Configuration getConfiguration()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.Configuration: com.swabunga.spell.engine.Configuration getConfiguration()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> l0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("jazzy.config")
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.Configuration: com.swabunga.spell.engine.Configuration getConfiguration()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if l0 == null goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.Configuration: com.swabunga.spell.engine.Configuration getConfiguration()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r0 = staticinvoke <com.swabunga.spell.engine.Configuration: com.swabunga.spell.engine.Configuration getConfiguration(java.lang.String)>(null)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.Configuration: com.swabunga.spell.engine.Configuration getConfiguration(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke $r0.<com.swabunga.spell.engine.PropertyConfiguration: void <init>()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.PropertyConfiguration: void <init>()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke $r7.<java.lang.StringBuffer: void <init>()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.PropertyConfiguration: void <init>()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not load Properties file :\n")
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.PropertyConfiguration: void <init>()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(l1#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.PropertyConfiguration: void <init>()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.PropertyConfiguration: void <init>()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.PropertyConfiguration: void <init>()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11)
[main] INFO soot.jimple.infoflow.Infoflow - The sink virtualinvoke $r4.<java.io.PrintStream: void println(int)>($i2) in method <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - l4 = virtualinvoke l1.<java.io.BufferedReader: java.lang.String readLine()>() in method <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> l4 = virtualinvoke l1.<java.io.BufferedReader: java.lang.String readLine()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if l4 == null goto $r3 = <java.lang.System: java.io.PrintStream out>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke $r4.<java.io.PrintStream: void println(int)>($i2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke $r4.<java.io.PrintStream: void println(int)>($i2)
[main] INFO soot.jimple.infoflow.Infoflow - - l3 = virtualinvoke l1.<java.io.BufferedReader: java.lang.String readLine()>() in method <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> l3 = virtualinvoke l1.<java.io.BufferedReader: java.lang.String readLine()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if l3 == null goto $r3 = <java.lang.System: java.io.PrintStream out>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke $r4.<java.io.PrintStream: void println(int)>($i2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke $r4.<java.io.PrintStream: void println(int)>($i2)
{<com.swabunga.spell.engine.EditDistance: int getDistance(java.lang.String,java.lang.String,int[][])>=[l0 := @parameter0: java.lang.String, l1 := @parameter1: java.lang.String, l2 := @parameter2: int[][], l11 = 0, l12 = 0, $i0 = virtualinvoke l0.<java.lang.String: int length()>(), l13 = $i0 + 1, $i1 = virtualinvoke l1.<java.lang.String: int length()>(), l14 = $i1 + 1, if l2 == null goto l2 = newmultiarray (int)[l13][l14], $i42 = lengthof l2, if $i42 < l13 goto l2 = newmultiarray (int)[l13][l14], $r14 = l2[0], $i40 = lengthof $r14, if $i40 >= l14 goto $r0 = l2[0], l2 = newmultiarray (int)[l13][l14], $r0 = l2[0], $r0[0] = 0, l3 = 1, if l3 == l13 goto l4 = 1, $r13 = l2[l3], $i34 = l3 - 1, $r11 = l2[$i34], $i36 = $r11[0], $i35 = <com.swabunga.spell.engine.EditDistance: int costOfInsertingSourceCharacter>, $i41 = $i36 + $i35, $r13[0] = $i41, l3 = l3 + 1, goto [?= (branch)], l4 = 1, if l4 == l14 goto l3#2 = 1, $r12 = l2[0], $r9 = l2[0], $i32 = l4 - 1, $i38 = $r9[$i32], $i37 = <com.swabunga.spell.engine.EditDistance: int costOfDeletingSourceCharacter>, $i39 = $i38 + $i37, $r12[l4] = $i39, l4 = l4 + 1, goto [?= (branch)], l3#2 = 1, if l3#2 == l13 goto $i3 = l13 - 1, $i5 = l3#2 - 1, l11#2 = virtualinvoke l0.<java.lang.String: char charAt(int)>($i5), l4#2 = 1, if l4#2 == l14 goto l3#2 = l3#2 + 1, $i6 = l4#2 - 1, l12#2 = virtualinvoke l1.<java.lang.String: char charAt(int)>($i6), if l11#2 != l12#2 goto $i11 = <com.swabunga.spell.engine.EditDistance: int costOfSubstitutingLetters>, $r10 = l2[l3#2], $i31 = l3#2 - 1, $r8 = l2[$i31], $i30 = l4#2 - 1, $i33 = $r8[$i30], $r10[l4#2] = $i33, goto [?= l4#2 = l4#2 + 1], $i11 = <com.swabunga.spell.engine.EditDistance: int costOfSubstitutingLetters>, $i8 = l3#2 - 1, $r2 = l2[$i8], $i7 = l4#2 - 1, $i9 = $r2[$i7], l5 = $i11 + $i9, l6 = 2147483647, if l3#2 == 1 goto $z1 = 0, if l4#2 == 1 goto $z1 = 0, $i29 = l4#2 - 2, $c28 = virtualinvoke l1.<java.lang.String: char charAt(int)>($i29), if l11#2 != $c28 goto $z1 = 0, $i27 = l3#2 - 2, $c26 = virtualinvoke l0.<java.lang.String: char charAt(int)>($i27), if $c26 != l12#2 goto $z1 = 0, $z1 = 1, goto [?= l10 = $z1], $z1 = 0, l10 = $z1, if l10 == 0 goto $i12 = <com.swabunga.spell.engine.EditDistance: int costOfDeletingSourceCharacter>, $i23 = <com.swabunga.spell.engine.EditDistance: int costOfSwappingLetters>, $i21 = l3#2 - 2, $r7 = l2[$i21], $i25 = l4#2 - 2, $i24 = $r7[$i25], l6 = $i23 + $i24, $i12 = <com.swabunga.spell.engine.EditDistance: int costOfDeletingSourceCharacter>, $r3 = l2[l3#2], $i10 = l4#2 - 1, $i14 = $r3[$i10], l7 = $i12 + $i14, $i15 = <com.swabunga.spell.engine.EditDistance: int costOfInsertingSourceCharacter>, $i13 = l3#2 - 1, $r4 = l2[$i13], $i16 = $r4[l4#2], l8 = $i15 + $i16, l9 = 2147483647, $z0 = staticinvoke <com.swabunga.spell.engine.EditDistance: boolean equalIgnoreCase(char,char)>(l11#2, l12#2), if $z0 == 0 goto $r5 = l2[l3#2], $i20 = <com.swabunga.spell.engine.EditDistance: int costOfChangingCase>, $i17 = l3#2 - 1, $r6 = l2[$i17], $i18 = l4#2 - 1, $i22 = $r6[$i18], l9 = $i20 + $i22, $r5 = l2[l3#2], $i19 = staticinvoke <com.swabunga.spell.engine.EditDistance: int minimum(int,int,int,int,int)>(l5, l6, l7, l8, l9), $r5[l4#2] = $i19, l4#2 = l4#2 + 1, goto [?= (branch)], l3#2 = l3#2 + 1, goto [?= (branch)], $i3 = l13 - 1, $r1 = l2[$i3], $i2 = l14 - 1, $i4 = $r1[$i2], return $i4], <dummyMainClass: void dummyMainMethod()>=[$r0 = new com.swabunga.spell.engine.EditDistance, specialinvoke $r0.<com.swabunga.spell.engine.EditDistance: void <init>()>(), if $i0 == 0 goto (branch), $r1 = newarray (java.lang.String)[1], $r1[0] = "", staticinvoke <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>($r1), goto [?= (branch)], return], <com.swabunga.spell.engine.EditDistance: void main(java.lang.String[])>=[l0 := @parameter0: java.lang.String[], $r0 = new java.io.BufferedReader, $r1 = new java.io.InputStreamReader, $r2 = <java.lang.System: java.io.InputStream in>, specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r2), specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1), l1 = $r0, l2 = newmultiarray (int)[0][0], l3 = virtualinvoke l1.<java.io.BufferedReader: java.lang.String readLine()>(), if l3 == null goto $r3 = <java.lang.System: java.io.PrintStream out>, $i0 = virtualinvoke l3.<java.lang.String: int length()>(), if $i0 != 0 goto l4 = virtualinvoke l1.<java.io.BufferedReader: java.lang.String readLine()>(), goto [?= $r3 = <java.lang.System: java.io.PrintStream out>], l4 = virtualinvoke l1.<java.io.BufferedReader: java.lang.String readLine()>(), if l4 == null goto $r3 = <java.lang.System: java.io.PrintStream out>, $i1 = virtualinvoke l4.<java.lang.String: int length()>(), if $i1 != 0 goto $r4 = <java.lang.System: java.io.PrintStream out>, goto [?= $r3 = <java.lang.System: java.io.PrintStream out>], $r4 = <java.lang.System: java.io.PrintStream out>, $i2 = staticinvoke <com.swabunga.spell.engine.EditDistance: int getDistance(java.lang.String,java.lang.String,int[][])>(l3, l4, l2), virtualinvoke $r4.<java.io.PrintStream: void println(int)>($i2), goto [?= l3 = virtualinvoke l1.<java.io.BufferedReader: java.lang.String readLine()>()], $r3 = <java.lang.System: java.io.PrintStream out>, virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("done"), return], <com.swabunga.spell.engine.EditDistance: void <init>()>=[l0 := @this: com.swabunga.spell.engine.EditDistance, specialinvoke l0.<java.lang.Object: void <init>()>(), return], <com.swabunga.spell.engine.Configuration: com.swabunga.spell.engine.Configuration getConfiguration(java.lang.String)>=[l0 := @parameter0: java.lang.String, if l0 == null goto $r0 = new com.swabunga.spell.engine.PropertyConfiguration, $i0 = virtualinvoke l0.<java.lang.String: int length()>(), if $i0 <= 0 goto $r0 = new com.swabunga.spell.engine.PropertyConfiguration, $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(l0), $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>(), l1 = (com.swabunga.spell.engine.Configuration) $r2, goto [?= return l1], $r3 := @caughtexception, l2 = $r3, $r4 = new com.swabunga.spell.engine.PropertyConfiguration, specialinvoke $r4.<com.swabunga.spell.engine.PropertyConfiguration: void <init>()>(), l1 = $r4, goto [?= return l1], $r5 := @caughtexception, l2#2 = $r5, $r6 = new com.swabunga.spell.engine.PropertyConfiguration, specialinvoke $r6.<com.swabunga.spell.engine.PropertyConfiguration: void <init>()>(), l1 = $r6, goto [?= return l1], $r7 := @caughtexception, l2#3 = $r7, $r8 = new com.swabunga.spell.engine.PropertyConfiguration, specialinvoke $r8.<com.swabunga.spell.engine.PropertyConfiguration: void <init>()>(), l1 = $r8, goto [?= return l1], $r0 = new com.swabunga.spell.engine.PropertyConfiguration, specialinvoke $r0.<com.swabunga.spell.engine.PropertyConfiguration: void <init>()>(), l1 = $r0, return l1], <com.swabunga.spell.engine.Configuration: void <init>()>=[l0 := @this: com.swabunga.spell.engine.Configuration, specialinvoke l0.<java.lang.Object: void <init>()>(), return], <com.swabunga.spell.engine.PropertyConfiguration: void <init>()>=[l0 := @this: com.swabunga.spell.engine.PropertyConfiguration, specialinvoke l0.<com.swabunga.spell.engine.Configuration: void <init>()>(), $r0 = new java.util.Properties, specialinvoke $r0.<java.util.Properties: void <init>()>(), l0.<com.swabunga.spell.engine.PropertyConfiguration: java.util.Properties prop> = $r0, $r1 = virtualinvoke l0.<java.lang.Object: java.lang.Class getClass()>(), $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>(), $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>("com/swabunga/spell/engine/configuration.properties"), l0.<com.swabunga.spell.engine.PropertyConfiguration: java.net.URL filename> = $r3, $r4 = l0.<com.swabunga.spell.engine.PropertyConfiguration: java.net.URL filename>, l1 = virtualinvoke $r4.<java.net.URL: java.io.InputStream openStream()>(), $r5 = l0.<com.swabunga.spell.engine.PropertyConfiguration: java.util.Properties prop>, virtualinvoke $r5.<java.util.Properties: void load(java.io.InputStream)>(l1), goto [?= return], $r6 := @caughtexception, l1#2 = $r6, $r8 = <java.lang.System: java.io.PrintStream out>, $r7 = new java.lang.StringBuffer, specialinvoke $r7.<java.lang.StringBuffer: void <init>()>(), $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not load Properties file :\n"), $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(l1#2), $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>(), virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11), return], <com.swabunga.spell.engine.EditDistance: boolean equalIgnoreCase(char,char)>=[l0 := @parameter0: char, l1 := @parameter1: char, if l0 != l1 goto $c0 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l0), return 1, $c0 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l0), $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>(l1), if $c0 != $c1 goto $z0 = 0, $z0 = 1, goto [?= return $z0], $z0 = 0, return $z0], <com.swabunga.spell.engine.Configuration: com.swabunga.spell.engine.Configuration getConfiguration()>=[l0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("jazzy.config"), if l0 == null goto (branch), $i0 = virtualinvoke l0.<java.lang.String: int length()>(), if $i0 <= 0 goto (branch), $r1 = staticinvoke <com.swabunga.spell.engine.Configuration: com.swabunga.spell.engine.Configuration getConfiguration(java.lang.String)>(l0), return $r1, goto [?= $r0 = staticinvoke <com.swabunga.spell.engine.Configuration: com.swabunga.spell.engine.Configuration getConfiguration(java.lang.String)>(null)], $r2 := @caughtexception, l0#2 = $r2, virtualinvoke l0#2.<java.lang.Throwable: void printStackTrace()>(), $r0 = staticinvoke <com.swabunga.spell.engine.Configuration: com.swabunga.spell.engine.Configuration getConfiguration(java.lang.String)>(null), return $r0], <com.swabunga.spell.engine.EditDistance: void <clinit>()>=[$r0 = staticinvoke <com.swabunga.spell.engine.Configuration: com.swabunga.spell.engine.Configuration getConfiguration()>(), <com.swabunga.spell.engine.EditDistance: com.swabunga.spell.engine.Configuration config> = $r0, $r1 = <com.swabunga.spell.engine.EditDistance: com.swabunga.spell.engine.Configuration config>, $i0 = virtualinvoke $r1.<com.swabunga.spell.engine.Configuration: int getInteger(java.lang.String)>("EDIT_DEL1"), <com.swabunga.spell.engine.EditDistance: int costOfDeletingSourceCharacter> = $i0, $r2 = <com.swabunga.spell.engine.EditDistance: com.swabunga.spell.engine.Configuration config>, $i1 = virtualinvoke $r2.<com.swabunga.spell.engine.Configuration: int getInteger(java.lang.String)>("EDIT_DEL2"), <com.swabunga.spell.engine.EditDistance: int costOfInsertingSourceCharacter> = $i1, $r3 = <com.swabunga.spell.engine.EditDistance: com.swabunga.spell.engine.Configuration config>, $i2 = virtualinvoke $r3.<com.swabunga.spell.engine.Configuration: int getInteger(java.lang.String)>("EDIT_SUB"), <com.swabunga.spell.engine.EditDistance: int costOfSubstitutingLetters> = $i2, $r4 = <com.swabunga.spell.engine.EditDistance: com.swabunga.spell.engine.Configuration config>, $i3 = virtualinvoke $r4.<com.swabunga.spell.engine.Configuration: int getInteger(java.lang.String)>("EDIT_SWAP"), <com.swabunga.spell.engine.EditDistance: int costOfSwappingLetters> = $i3, $r5 = <com.swabunga.spell.engine.EditDistance: com.swabunga.spell.engine.Configuration config>, $i4 = virtualinvoke $r5.<com.swabunga.spell.engine.Configuration: int getInteger(java.lang.String)>("EDIT_CASE"), <com.swabunga.spell.engine.EditDistance: int costOfChangingCase> = $i4, return], <com.swabunga.spell.engine.EditDistance: int minimum(int,int,int,int,int)>=[l0 := @parameter0: int, l1 := @parameter1: int, l2 := @parameter2: int, l3 := @parameter3: int, l4 := @parameter4: int, l5 = l0, if l1 >= l5 goto (branch), l5 = l1, if l2 >= l5 goto (branch), l5 = l2, if l3 >= l5 goto (branch), l5 = l3, if l4 >= l5 goto return l5, l5 = l4, return l5], <com.swabunga.spell.engine.PropertyConfiguration: int getInteger(java.lang.String)>=[l0 := @this: com.swabunga.spell.engine.PropertyConfiguration, l1 := @parameter0: java.lang.String, $r0 = new java.lang.Integer, $r1 = l0.<com.swabunga.spell.engine.PropertyConfiguration: java.util.Properties prop>, $r2 = virtualinvoke $r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(l1), specialinvoke $r0.<java.lang.Integer: void <init>(java.lang.String)>($r2), $i0 = virtualinvoke $r0.<java.lang.Integer: int intValue()>(), return $i0]}
270
252
18
