[main] INFO soot.jimple.infoflow.taintWrappers.EasyTaintWrapper - Loaded wrapper entries for 52 classes and 4 exclusions.
[main] INFO soot.jimple.infoflow.Infoflow - Resetting Soot...
Warning: java.lang.NoClassDefFoundError is a phantom class!
Warning: java.lang.StringBuffer is a phantom class!
Warning: java.lang.Boolean is a phantom class!
Warning: java.lang.Long is a phantom class!
Warning: java.lang.Integer is a phantom class!
Warning: java.lang.Short is a phantom class!
Warning: java.lang.Float is a phantom class!
Warning: java.lang.Double is a phantom class!
Warning: java.lang.Throwable is a phantom class!
Warning: java.lang.Class is a phantom class!
Warning: java.lang.Character is a phantom class!
Warning: java.lang.AssertionError is a phantom class!
Warning: java.lang.Byte is a phantom class!
Warning: java.lang.Void is a phantom class!
Warning: java.lang.ClassFormatError is a phantom class!
Warning: java.lang.InstantiationError is a phantom class!
Warning: java.lang.Runnable is a phantom class!
Warning: java.lang.ref.Finalizer is a phantom class!
Warning: java.lang.IncompatibleClassChangeError is a phantom class!
Warning: java.lang.NoSuchFieldError is a phantom class!
Warning: java.lang.StackOverflowError is a phantom class!
Warning: java.lang.Thread is a phantom class!
Warning: java.lang.IllegalAccessError is a phantom class!
Warning: java.lang.ArrayStoreException is a phantom class!
Warning: java.lang.NoSuchMethodError is a phantom class!
Warning: java.lang.LinkageError is a phantom class!
Warning: java.lang.ExceptionInInitializerError is a phantom class!
Warning: java.lang.InternalError is a phantom class!
Warning: java.lang.VerifyError is a phantom class!
Warning: java.io.Serializable is a phantom class!
Warning: java.lang.ArrayIndexOutOfBoundsException is a phantom class!
Warning: java.lang.ClassCastException is a phantom class!
Warning: java.lang.ArithmeticException is a phantom class!
Warning: java.lang.IndexOutOfBoundsException is a phantom class!
Warning: java.lang.AbstractMethodError is a phantom class!
Warning: java.lang.Object is a phantom class!
Warning: java.lang.ThreadDeath is a phantom class!
Warning: java.lang.String is a phantom class!
Warning: java.lang.UnknownError is a phantom class!
Warning: java.lang.ClassCircularityError is a phantom class!
Warning: java.lang.Cloneable is a phantom class!
Warning: java.lang.NegativeArraySizeException is a phantom class!
Warning: java.lang.UnsatisfiedLinkError is a phantom class!
Warning: java.lang.Error is a phantom class!
Warning: java.lang.OutOfMemoryError is a phantom class!
Warning: java.lang.IllegalMonitorStateException is a phantom class!
Warning: java.lang.RuntimeException is a phantom class!
Warning: java.lang.NullPointerException is a phantom class!
Warning: java.lang.ClassNotFoundException is a phantom class!
[main] INFO soot.jimple.infoflow.Infoflow - Basic class loading done.
Warning: java.io.InputStream is a phantom class!
Warning: java.util.Properties is a phantom class!
Warning: org.apache.commons.cli.HelpFormatter is a phantom class!
Warning: java.lang.StringBuilder is a phantom class!
Warning: java.io.PrintStream is a phantom class!
Warning: java.lang.System is a phantom class!
Warning: java.io.IOException is a phantom class!
Warning: com.google.common.collect.Lists is a phantom class!
Warning: org.apache.commons.cli.CommandLineParser is a phantom class!
Warning: org.apache.commons.cli.ParseException is a phantom class!
Warning: java.io.FileInputStream is a phantom class!
Warning: java.util.LinkedList is a phantom class!
Warning: org.apache.commons.cli.Options is a phantom class!
Warning: java.io.FileOutputStream is a phantom class!
Warning: java.util.List is a phantom class!
Warning: java.io.Closeable is a phantom class!
Warning: org.apache.commons.cli.PosixParser is a phantom class!
Warning: org.apache.commons.cli.CommandLine is a phantom class!
Warning: java.lang.ClassLoader is a phantom class!
Warning: java.lang.Exception is a phantom class!
Warning: java.io.File is a phantom class!
Warning: java.io.OutputStream is a phantom class!
Warning: java.io.FileNotFoundException is a phantom class!
Warning: java.lang.IllegalArgumentException is a phantom class!
Warning: com.google.common.collect.Sets is a phantom class!
Warning: java.util.Locale is a phantom class!
Warning: java.nio.charset.Charset is a phantom class!
Warning: java.util.Iterator is a phantom class!
Warning: java.io.UnsupportedEncodingException is a phantom class!
Warning: java.util.TreeSet is a phantom class!
Warning: org.apache.commons.logging.Log is a phantom class!
Warning: java.util.SortedSet is a phantom class!
Warning: java.util.Set is a phantom class!
Warning: java.util.Collection is a phantom class!
Warning: java.util.ArrayList is a phantom class!
Warning: java.util.StringTokenizer is a phantom class!
Warning: java.util.EventListener is a phantom class!
Warning: java.util.Map is a phantom class!
Warning: java.net.URISyntaxException is a phantom class!
Warning: org.xml.sax.SAXParseException is a phantom class!
Warning: java.net.MalformedURLException is a phantom class!
Warning: org.xml.sax.InputSource is a phantom class!
Warning: java.util.HashMap is a phantom class!
Warning: javax.xml.parsers.ParserConfigurationException is a phantom class!
Warning: com.google.common.collect.Maps is a phantom class!
Warning: java.lang.Deprecated is a phantom class!
Warning: org.xml.sax.SAXException is a phantom class!
Warning: java.net.URI is a phantom class!
Warning: java.net.URL is a phantom class!
Warning: java.io.PrintWriter is a phantom class!
Warning: java.io.Writer is a phantom class!
Warning: java.io.OutputStreamWriter is a phantom class!
Warning: java.io.StringWriter is a phantom class!
Warning: java.lang.NumberFormatException is a phantom class!
Warning: java.util.ResourceBundle is a phantom class!
Warning: com.google.common.collect.ImmutableMap is a phantom class!
Warning: org.apache.commons.logging.LogFactory is a phantom class!
Warning: java.io.LineNumberReader is a phantom class!
Warning: org.apache.commons.beanutils.ConversionException is a phantom class!
Warning: java.util.regex.PatternSyntaxException is a phantom class!
Warning: java.util.regex.Pattern is a phantom class!
Warning: java.util.concurrent.ConcurrentMap is a phantom class!
Warning: java.io.InputStreamReader is a phantom class!
Warning: java.io.Reader is a phantom class!
Warning: org.apache.commons.beanutils.BeanUtilsBean is a phantom class!
Warning: java.beans.PropertyDescriptor is a phantom class!
Warning: java.lang.reflect.Method is a phantom class!
Warning: org.apache.commons.beanutils.converters.DoubleConverter is a phantom class!
Warning: com.google.common.collect.ImmutableCollection is a phantom class!
Warning: org.apache.commons.beanutils.converters.CharacterConverter is a phantom class!
Warning: org.apache.commons.beanutils.converters.IntegerConverter is a phantom class!
Warning: org.apache.commons.beanutils.converters.ShortConverter is a phantom class!
Warning: org.apache.commons.beanutils.converters.LongConverter is a phantom class!
Warning: java.lang.IllegalAccessException is a phantom class!
Warning: org.apache.commons.beanutils.PropertyUtils is a phantom class!
Warning: org.apache.commons.beanutils.converters.ArrayConverter is a phantom class!
Warning: org.apache.commons.beanutils.converters.FloatConverter is a phantom class!
Warning: org.apache.commons.beanutils.converters.ByteConverter is a phantom class!
Warning: org.apache.commons.beanutils.Converter is a phantom class!
Warning: org.apache.commons.beanutils.ConvertUtilsBean is a phantom class!
Warning: org.apache.commons.beanutils.converters.BooleanConverter is a phantom class!
Warning: org.apache.commons.beanutils.PropertyUtilsBean is a phantom class!
Warning: java.lang.reflect.InvocationTargetException is a phantom class!
Warning: java.lang.NoSuchMethodException is a phantom class!
Warning: java.util.Enumeration is a phantom class!
Warning: java.io.BufferedInputStream is a phantom class!
Warning: org.xml.sax.Attributes is a phantom class!
Warning: java.util.LinkedHashSet is a phantom class!
Warning: java.util.AbstractList is a phantom class!
Warning: java.io.BufferedReader is a phantom class!
Warning: java.lang.CharSequence is a phantom class!
Warning: java.util.ConcurrentModificationException is a phantom class!
Warning: java.nio.charset.CodingErrorAction is a phantom class!
Warning: java.nio.ByteBuffer is a phantom class!
Warning: java.nio.charset.UnsupportedCharsetException is a phantom class!
Warning: java.util.regex.Matcher is a phantom class!
Warning: java.nio.charset.CharsetDecoder is a phantom class!
Warning: java.util.Arrays is a phantom class!
Warning: java.io.StringReader is a phantom class!
Warning: java.lang.Enum is a phantom class!
Warning: com.google.common.collect.ImmutableList is a phantom class!
Warning: java.lang.InstantiationException is a phantom class!
Warning: java.lang.Iterable is a phantom class!
Warning: java.util.EventObject is a phantom class!
Warning: java.util.HashSet is a phantom class!
Warning: java.lang.Comparable is a phantom class!
Warning: java.util.Collections is a phantom class!
Warning: java.util.MissingResourceException is a phantom class!
Warning: java.text.MessageFormat is a phantom class!
Warning: java.lang.IllegalStateException is a phantom class!
Warning: org.xml.sax.helpers.DefaultHandler is a phantom class!
Warning: org.xml.sax.ContentHandler is a phantom class!
Warning: org.xml.sax.ErrorHandler is a phantom class!
Warning: org.xml.sax.EntityResolver is a phantom class!
Warning: javax.xml.parsers.SAXParser is a phantom class!
Warning: org.xml.sax.XMLReader is a phantom class!
Warning: javax.xml.parsers.SAXParserFactory is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[main] INFO soot.jimple.infoflow.Infoflow - Callgraph has 436 edges
[main] INFO soot.jimple.infoflow.Infoflow - Looking for sources and sinks...
@Suresh : <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
@Suresh : <com.puppycrawl.tools.checkstyle.Main: void <clinit>()>
@Suresh : <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
@Suresh : <com.puppycrawl.tools.checkstyle.Main: java.util.List getFilesToProcess(org.apache.commons.cli.CommandLine)>
@Suresh : <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
@Suresh : <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.Configuration loadConfig(org.apache.commons.cli.CommandLine,java.util.Properties)>
@Suresh : <com.puppycrawl.tools.checkstyle.Main: void usage()>
@Suresh : <com.puppycrawl.tools.checkstyle.Main: java.util.Properties loadProperties(java.io.File)>
@Suresh : <com.puppycrawl.tools.checkstyle.Main: void traverse(java.io.File,java.util.List)>
@Suresh : <com.puppycrawl.tools.checkstyle.XMLLogger: void <clinit>()>
@Suresh : <com.puppycrawl.tools.checkstyle.ConfigurationLoader: com.puppycrawl.tools.checkstyle.api.Configuration loadConfiguration(java.lang.String,com.puppycrawl.tools.checkstyle.PropertyResolver)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.Utils: void <clinit>()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.Utils: void closeQuietly(java.io.Closeable)>
@Suresh : <com.puppycrawl.tools.checkstyle.ConfigurationLoader: com.puppycrawl.tools.checkstyle.api.Configuration loadConfiguration(java.lang.String,com.puppycrawl.tools.checkstyle.PropertyResolver,boolean)>
@Suresh : <com.puppycrawl.tools.checkstyle.ConfigurationLoader: com.puppycrawl.tools.checkstyle.api.Configuration loadConfiguration(org.xml.sax.InputSource,com.puppycrawl.tools.checkstyle.PropertyResolver,boolean)>
@Suresh : <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
@Suresh : <com.puppycrawl.tools.checkstyle.Checker: void destroy()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.FileText: void <clinit>()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.Utils: org.apache.commons.logging.Log getExceptionLogger()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.LocalizedMessage: void <clinit>()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.Utils: java.util.regex.Pattern getPattern(java.lang.String)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.SeverityLevel: void <clinit>()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.Utils: java.util.regex.Pattern getPattern(java.lang.String,int)>
@Suresh : <com.puppycrawl.tools.checkstyle.Checker: void <init>()>
@Suresh : <com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
@Suresh : <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.AutomaticBean: org.apache.commons.beanutils.BeanUtilsBean createBeanUtilsBean()>
@Suresh : <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
@Suresh : <com.puppycrawl.tools.checkstyle.DefaultLogger: void <init>(java.io.OutputStream,boolean)>
@Suresh : <com.puppycrawl.tools.checkstyle.PropertiesExpander: void <init>(java.util.Properties)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.CheckstyleException: void <init>(java.lang.String,java.lang.Throwable)>
@Suresh : <com.puppycrawl.tools.checkstyle.ConfigurationLoader: void <init>(com.puppycrawl.tools.checkstyle.PropertyResolver,boolean)>
@Suresh : <com.puppycrawl.tools.checkstyle.ConfigurationLoader: void parseInputSource(org.xml.sax.InputSource)>
@Suresh : <com.puppycrawl.tools.checkstyle.ConfigurationLoader: com.puppycrawl.tools.checkstyle.api.Configuration getConfiguration()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.FastStack: com.puppycrawl.tools.checkstyle.api.FastStack newInstance()>
@Suresh : <com.puppycrawl.tools.checkstyle.Checker: void fireAuditStarted()>
@Suresh : <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
@Suresh : <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
@Suresh : <com.puppycrawl.tools.checkstyle.Checker: void fireFileFinished(java.lang.String)>
@Suresh : <com.puppycrawl.tools.checkstyle.Checker: void fireAuditFinished()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.FileText: void <init>(java.io.File,java.lang.String)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.LocalizedMessage: void <init>(int,java.lang.String,java.lang.String,java.lang.Object[],java.lang.String,java.lang.Class,java.lang.String)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter: int getCount()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.FilterSet: void clear()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.SeverityLevel: void <init>(java.lang.String,int)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void <init>()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter: void <init>(com.puppycrawl.tools.checkstyle.api.SeverityLevel)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.FilterSet: void <init>()>
@Suresh : <com.puppycrawl.tools.checkstyle.DefaultConfiguration: java.lang.String[] getAttributeNames()>
@Suresh : <com.puppycrawl.tools.checkstyle.DefaultConfiguration: java.lang.String getAttribute(java.lang.String)>
@Suresh : <com.puppycrawl.tools.checkstyle.DefaultConfiguration: java.lang.String getName()>
@Suresh : <com.puppycrawl.tools.checkstyle.DefaultConfiguration: com.puppycrawl.tools.checkstyle.api.Configuration[] getChildren()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.CheckstyleException: void <init>(java.lang.String)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void finishLocalSetup()>
@Suresh : <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>
@Suresh : <com.puppycrawl.tools.checkstyle.Checker: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>
@Suresh : <com.puppycrawl.tools.checkstyle.PackageNamesLoader: java.util.Set getPackageNames(java.lang.ClassLoader)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.LocalizedMessage: void setLocale(java.util.Locale)>
@Suresh : <com.puppycrawl.tools.checkstyle.PackageNamesLoader: void loadPackageNamesSource(org.xml.sax.InputSource,java.lang.String,com.puppycrawl.tools.checkstyle.PackageNamesLoader)>
@Suresh : <com.puppycrawl.tools.checkstyle.PackageNamesLoader: com.puppycrawl.tools.checkstyle.PackageNamesLoader newPackageNamesLoader()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.AutomaticBean$RelaxedStringArrayConverter: void <init>(com.puppycrawl.tools.checkstyle.api.AutomaticBean$1)>
@Suresh : <com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>
@Suresh : <com.puppycrawl.tools.checkstyle.DefaultLogger: void <init>(java.io.OutputStream,boolean,java.io.OutputStream,boolean)>
@Suresh : <com.puppycrawl.tools.checkstyle.ConfigurationLoader$InternalLoader: void <init>(com.puppycrawl.tools.checkstyle.ConfigurationLoader,com.puppycrawl.tools.checkstyle.ConfigurationLoader$1)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.AbstractLoader: void parseInputSource(org.xml.sax.InputSource)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.FastStack: void <init>()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.AuditEvent: void <init>(java.lang.Object)>
@Suresh : <com.puppycrawl.tools.checkstyle.XMLLogger: void auditStarted(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter: void auditStarted(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
@Suresh : <com.puppycrawl.tools.checkstyle.DefaultLogger: void auditStarted(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
@Suresh : <com.puppycrawl.tools.checkstyle.Checker: java.lang.String getStrippedFileName(java.lang.String)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.AuditEvent: void <init>(java.lang.Object,java.lang.String)>
@Suresh : <com.puppycrawl.tools.checkstyle.XMLLogger: void fileStarted(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter: void fileStarted(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
@Suresh : <com.puppycrawl.tools.checkstyle.DefaultLogger: void fileStarted(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.Utils: java.lang.String getStrippedFileName(java.lang.String,java.lang.String)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.AuditEvent: void <init>(java.lang.Object,java.lang.String,com.puppycrawl.tools.checkstyle.api.LocalizedMessage)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
@Suresh : <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
@Suresh : <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
@Suresh : <com.puppycrawl.tools.checkstyle.XMLLogger: void fileFinished(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter: void fileFinished(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
@Suresh : <com.puppycrawl.tools.checkstyle.DefaultLogger: void fileFinished(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
@Suresh : <com.puppycrawl.tools.checkstyle.XMLLogger: void auditFinished(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter: void auditFinished(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
@Suresh : <com.puppycrawl.tools.checkstyle.DefaultLogger: void auditFinished(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.LocalizedMessage: void <init>(int,int,java.lang.String,java.lang.String,java.lang.Object[],com.puppycrawl.tools.checkstyle.api.SeverityLevel,java.lang.String,java.lang.Class,java.lang.String)>
@Suresh : <com.puppycrawl.tools.checkstyle.PackageObjectFactory: void <init>(java.util.Set,java.lang.ClassLoader)>
@Suresh : <com.puppycrawl.tools.checkstyle.DefaultContext: void <init>()>
@Suresh : <com.puppycrawl.tools.checkstyle.DefaultContext: void add(java.lang.String,java.lang.Object)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.SeverityLevel: java.lang.String getName()>
@Suresh : <com.puppycrawl.tools.checkstyle.PackageObjectFactory: java.lang.Object createModule(java.lang.String)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void contextualize(com.puppycrawl.tools.checkstyle.api.Context)>
@Suresh : <com.puppycrawl.tools.checkstyle.Checker: void addFileSetCheck(com.puppycrawl.tools.checkstyle.api.FileSetCheck)>
@Suresh : <com.puppycrawl.tools.checkstyle.Checker: void addFilter(com.puppycrawl.tools.checkstyle.api.Filter)>
@Suresh : <com.puppycrawl.tools.checkstyle.PackageNamesLoader: java.util.Set getPackageNames()>
@Suresh : <com.puppycrawl.tools.checkstyle.PackageNamesLoader: void <init>()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.AutomaticBean$RelaxedStringArrayConverter: void <init>()>
@Suresh : <com.puppycrawl.tools.checkstyle.ConfigurationLoader$InternalLoader: void <init>(com.puppycrawl.tools.checkstyle.ConfigurationLoader)>
@Suresh : <com.puppycrawl.tools.checkstyle.ConfigurationLoader: java.util.Map access$000()>
@Suresh : <com.puppycrawl.tools.checkstyle.ConfigurationLoader: java.util.Map createIdToResourceNameMap()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getFileName()>
@Suresh : <com.puppycrawl.tools.checkstyle.XMLLogger: java.lang.String encode(java.lang.String)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.AuditEvent: int getLine()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getMessage()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getSourceName()>
@Suresh : <com.puppycrawl.tools.checkstyle.DefaultLogger: void closeStreams()>
@Suresh : <com.puppycrawl.tools.checkstyle.PackageObjectFactory: java.lang.Object doMakeObject(java.lang.String)>
@Suresh : <com.puppycrawl.tools.checkstyle.DefaultContext: com.google.common.collect.ImmutableCollection getAttributeNames()>
@Suresh : <com.puppycrawl.tools.checkstyle.DefaultContext: java.lang.Object get(java.lang.String)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.FilterSet: void addFilter(com.puppycrawl.tools.checkstyle.api.Filter)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.AbstractLoader: void <init>(java.lang.String,java.lang.String)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.AbstractLoader: void <init>(java.util.Map)>
@Suresh : <com.puppycrawl.tools.checkstyle.XMLLogger: boolean isReference(java.lang.String)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.LocalizedMessage: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.LocalizedMessage: int getLineNo()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.LocalizedMessage: int getColumnNo()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.LocalizedMessage: java.lang.String getMessage()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.LocalizedMessage: java.lang.String getSourceName()>
@Suresh : <com.puppycrawl.tools.checkstyle.PackageObjectFactory: java.lang.Object createObject(java.lang.String)>
@Suresh : <com.puppycrawl.tools.checkstyle.api.LocalizedMessage: java.lang.String getCustomMessage()>
@Suresh : <com.puppycrawl.tools.checkstyle.api.LocalizedMessage: java.util.ResourceBundle getBundle(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - Source lookup done, found 10 sources and 49 sinks.
[main] INFO soot.jimple.infoflow.Infoflow - Taint wrapper hits: 5788
[main] INFO soot.jimple.infoflow.Infoflow - Taint wrapper misses: 12211
[main] INFO soot.jimple.infoflow.Infoflow - IFDS problem with 51884 forward and 7692 backward edges solved, processing results...
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Obtainted 225 connections between sources and sinks
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 1
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 2
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 3
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 4
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 5
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 6
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 7
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 8
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 9
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 10
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 11
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 12
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 13
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 14
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 15
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 16
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 17
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 18
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 19
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 20
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 21
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 22
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 23
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 24
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 25
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 26
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 27
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 28
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 29
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 30
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 31
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 32
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 33
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 34
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 35
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 36
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 37
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 38
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 39
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 40
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 41
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 42
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 43
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 44
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 45
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 46
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 47
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 48
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 49
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 50
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 51
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 52
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 53
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 54
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 55
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 56
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 57
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 58
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 59
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 60
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 61
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 62
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 63
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 64
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 65
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 66
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 67
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 68
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 69
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 70
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 71
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 72
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 73
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 74
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 75
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 76
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 77
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 78
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 79
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 80
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 81
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 82
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 83
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 84
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 85
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 86
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 87
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 88
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 89
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 90
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 91
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 92
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 93
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 94
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 95
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 96
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 97
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 98
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 99
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 100
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 101
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 102
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 103
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 104
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 105
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 106
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 107
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 108
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 109
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 110
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 111
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 112
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 113
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 114
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 115
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 116
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 117
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 118
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 119
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 120
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 121
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 122
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 123
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 124
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 125
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 126
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 127
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 128
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 129
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 130
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 131
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 132
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 133
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 134
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 135
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 136
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 137
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 138
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 139
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 140
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 141
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 142
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 143
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 144
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 145
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 146
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 147
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 148
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 149
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 150
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 151
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 152
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 153
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 154
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 155
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 156
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 157
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 158
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 159
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 160
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 161
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 162
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 163
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 164
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 165
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 166
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 167
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 168
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 169
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 170
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 171
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 172
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 173
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 174
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 175
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 176
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 177
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 178
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 179
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 180
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 181
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 182
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 183
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 184
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 185
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 186
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 187
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 188
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 189
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 190
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 191
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 192
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 193
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 194
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 195
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 196
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 197
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 198
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 199
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 200
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 201
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 202
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 203
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 204
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 205
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 206
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 207
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 208
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 209
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 210
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 211
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 212
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 213
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 214
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 215
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 216
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 217
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 218
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 219
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 220
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 221
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 222
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 223
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 224
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Building path 225
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Path processing took 2.050788874 seconds in total for 108619 edges
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Running path extension on 3 roots
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Path extension took 2.397395071 seconds.
[main] INFO soot.jimple.infoflow.data.pathBuilders.SemiThreadedPathBuilder - Path proecssing took 2.409654533 seconds in total
[main] INFO soot.jimple.infoflow.Infoflow - The sink $i3 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getLine()>() in method <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2) in method <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r2 = this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.api.FilterSet mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r0 = this.<com.puppycrawl.tools.checkstyle.api.FilterSet: java.util.Set mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = interfaceinvoke filter.<com.puppycrawl.tools.checkstyle.api.Filter: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(aEvent)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i3 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getLine()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i3 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getLine()>()
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader) in method <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r2 = this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.api.FilterSet mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r0 = this.<com.puppycrawl.tools.checkstyle.api.FilterSet: java.util.Set mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = interfaceinvoke filter.<com.puppycrawl.tools.checkstyle.api.Filter: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(aEvent)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i3 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getLine()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i3 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getLine()>()
[main] INFO soot.jimple.infoflow.Infoflow - - specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS) in method <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = tmp$1145315755
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> tmp$297167540 = (com.puppycrawl.tools.checkstyle.api.AuditListener) listener
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return tmp$297167540
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> c = staticinvoke <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>(config, fname#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>(aNosy)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(aListener)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i3 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getLine()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i3 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getLine()>()
[main] INFO soot.jimple.infoflow.Infoflow - The sink severityLevel = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>() in method <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2) in method <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r2 = this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.api.FilterSet mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r0 = this.<com.puppycrawl.tools.checkstyle.api.FilterSet: java.util.Set mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r4 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> severityLevel = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> severityLevel = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader) in method <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r8 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mFileSetChecks>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z3 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z3 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke fileMessages.<java.util.SortedSet: boolean addAll(java.util.Collection)>($r10)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke aErrors.<java.util.SortedSet: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r4 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> severityLevel = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> severityLevel = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - - specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS) in method <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = tmp$1145315755
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> tmp$297167540 = (com.puppycrawl.tools.checkstyle.api.AuditListener) listener
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return tmp$297167540
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> c = staticinvoke <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>(config, fname#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>(aNosy)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(aListener)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return 0
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r4 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> severityLevel = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> severityLevel = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - The sink $i1 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>() in method <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2) in method <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r2 = this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.api.FilterSet mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r0 = this.<com.puppycrawl.tools.checkstyle.api.FilterSet: java.util.Set mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i1 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i1 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>()
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader) in method <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r2 = this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.api.FilterSet mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r0 = this.<com.puppycrawl.tools.checkstyle.api.FilterSet: java.util.Set mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i1 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i1 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>()
[main] INFO soot.jimple.infoflow.Infoflow - - specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS) in method <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = tmp$1145315755
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> tmp$297167540 = (com.puppycrawl.tools.checkstyle.api.AuditListener) listener
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return tmp$297167540
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> c = staticinvoke <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>(config, fname#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>(aNosy)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(aListener)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i1 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i1 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>()
[main] INFO soot.jimple.infoflow.Infoflow - The sink stripped = specialinvoke this.<com.puppycrawl.tools.checkstyle.Checker: java.lang.String getStrippedFileName(java.lang.String)>(aFileName) in method <com.puppycrawl.tools.checkstyle.Checker: void fireFileFinished(java.lang.String)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2) in method <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r2 = this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.api.FilterSet mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r0 = this.<com.puppycrawl.tools.checkstyle.api.FilterSet: java.util.Set mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireFileFinished(java.lang.String)>(fileName)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileFinished(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> stripped = specialinvoke this.<com.puppycrawl.tools.checkstyle.Checker: java.lang.String getStrippedFileName(java.lang.String)>(aFileName)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileFinished(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> stripped = specialinvoke this.<com.puppycrawl.tools.checkstyle.Checker: java.lang.String getStrippedFileName(java.lang.String)>(aFileName)
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader) in method <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>(aConfig)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void finishLocalSetup()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.ModuleFactory mModuleFactory>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $r3 != null goto tmp$728286990 = new com.puppycrawl.tools.checkstyle.DefaultContext
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke tmp$662410244.<com.puppycrawl.tools.checkstyle.PackageObjectFactory: void <init>(java.util.Set,java.lang.ClassLoader)>(packageNames, $r13)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.ModuleFactory mModuleFactory> = tmp$662410244
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireFileFinished(java.lang.String)>(fileName)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileFinished(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> stripped = specialinvoke this.<com.puppycrawl.tools.checkstyle.Checker: java.lang.String getStrippedFileName(java.lang.String)>(aFileName)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileFinished(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> stripped = specialinvoke this.<com.puppycrawl.tools.checkstyle.Checker: java.lang.String getStrippedFileName(java.lang.String)>(aFileName)
[main] INFO soot.jimple.infoflow.Infoflow - - specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS) in method <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = tmp$1145315755
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> tmp$297167540 = (com.puppycrawl.tools.checkstyle.api.AuditListener) listener
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return tmp$297167540
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> c = staticinvoke <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>(config, fname#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>(aNosy)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(aListener)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireFileFinished(java.lang.String)>(fileName)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileFinished(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> stripped = specialinvoke this.<com.puppycrawl.tools.checkstyle.Checker: java.lang.String getStrippedFileName(java.lang.String)>(aFileName)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileFinished(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> stripped = specialinvoke this.<com.puppycrawl.tools.checkstyle.Checker: java.lang.String getStrippedFileName(java.lang.String)>(aFileName)
[main] INFO soot.jimple.infoflow.Infoflow - The sink fileName = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getFileName()>() in method <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2) in method <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r2 = this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.api.FilterSet mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r0 = this.<com.puppycrawl.tools.checkstyle.api.FilterSet: java.util.Set mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = interfaceinvoke filter.<com.puppycrawl.tools.checkstyle.api.Filter: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(aEvent)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> fileName = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getFileName()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> fileName = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getFileName()>()
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader) in method <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r2 = this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.api.FilterSet mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r0 = this.<com.puppycrawl.tools.checkstyle.api.FilterSet: java.util.Set mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = interfaceinvoke filter.<com.puppycrawl.tools.checkstyle.api.Filter: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(aEvent)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> fileName = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getFileName()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> fileName = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getFileName()>()
[main] INFO soot.jimple.infoflow.Infoflow - - specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS) in method <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = tmp$1145315755
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> tmp$297167540 = (com.puppycrawl.tools.checkstyle.api.AuditListener) listener
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return tmp$297167540
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> c = staticinvoke <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>(config, fname#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>(aNosy)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(aListener)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> fileName = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getFileName()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> fileName = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getFileName()>()
[main] INFO soot.jimple.infoflow.Infoflow - The sink $i2 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>() in method <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2) in method <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r2 = this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.api.FilterSet mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r0 = this.<com.puppycrawl.tools.checkstyle.api.FilterSet: java.util.Set mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r1 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.SeverityLevel: boolean equals(java.lang.Object)>($r1)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 != 0 goto return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i2 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i2 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>()
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader) in method <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r2 = this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.api.FilterSet mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r0 = this.<com.puppycrawl.tools.checkstyle.api.FilterSet: java.util.Set mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r1 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.SeverityLevel: boolean equals(java.lang.Object)>($r1)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 != 0 goto return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i2 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i2 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>()
[main] INFO soot.jimple.infoflow.Infoflow - - specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS) in method <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = tmp$1145315755
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> tmp$297167540 = (com.puppycrawl.tools.checkstyle.api.AuditListener) listener
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return tmp$297167540
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> c = staticinvoke <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>(config, fname#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>(aNosy)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(aListener)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.SeverityLevel: boolean equals(java.lang.Object)>($r1)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 != 0 goto return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i2 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i2 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>()
[main] INFO soot.jimple.infoflow.Infoflow - The sink $i4 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>() in method <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2) in method <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> severityLevel = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.SeverityLevel: boolean equals(java.lang.Object)>(severityLevel)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 != 0 goto return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i4 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i4 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>()
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader) in method <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> severityLevel = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.SeverityLevel: boolean equals(java.lang.Object)>(severityLevel)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 != 0 goto return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i4 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i4 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>()
[main] INFO soot.jimple.infoflow.Infoflow - - specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS) in method <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = tmp$1145315755
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> tmp$297167540 = (com.puppycrawl.tools.checkstyle.api.AuditListener) listener
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return tmp$297167540
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> c = staticinvoke <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>(config, fname#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>(aNosy)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(aListener)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> severityLevel = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.SeverityLevel: boolean equals(java.lang.Object)>(severityLevel)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 != 0 goto return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i4 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i4 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>()
[main] INFO soot.jimple.infoflow.Infoflow - The sink $r3 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getFileName()>() in method <com.puppycrawl.tools.checkstyle.XMLLogger: void fileStarted(com.puppycrawl.tools.checkstyle.api.AuditEvent)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2) in method <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r8 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mFileSetChecks>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z3 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z3 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r16 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r2 = this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.api.FilterSet mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r0 = this.<com.puppycrawl.tools.checkstyle.api.FilterSet: java.util.Set mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>(fileName)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r1 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r2
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void fileStarted(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void fileStarted(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getFileName()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void fileStarted(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getFileName()>()
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader) in method <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r8 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mFileSetChecks>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z3 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z3 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke fileMessages.<java.util.SortedSet: boolean addAll(java.util.Collection)>($r10)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke aErrors.<java.util.SortedSet: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r2 = this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.api.FilterSet mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r0 = this.<com.puppycrawl.tools.checkstyle.api.FilterSet: java.util.Set mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>(fileName)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r1 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r2
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void fileStarted(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void fileStarted(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getFileName()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void fileStarted(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getFileName()>()
[main] INFO soot.jimple.infoflow.Infoflow - - specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS) in method <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = tmp$1145315755
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> tmp$297167540 = (com.puppycrawl.tools.checkstyle.api.AuditListener) listener
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return tmp$297167540
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> c = staticinvoke <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>(config, fname#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>(aNosy)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(aListener)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>(fileName)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r1 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r2
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void fileStarted(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void fileStarted(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getFileName()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void fileStarted(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getFileName()>()
[main] INFO soot.jimple.infoflow.Infoflow - The sink $r12 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>() in method <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2) in method <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r4 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r12 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r12 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader) in method <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r4 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r12 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r12 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - - specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS) in method <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = tmp$1145315755
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> tmp$297167540 = (com.puppycrawl.tools.checkstyle.api.AuditListener) listener
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return tmp$297167540
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> c = staticinvoke <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>(config, fname#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>(aNosy)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(aListener)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r4 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r12 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r12 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - The sink $r20 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getMessage()>() in method <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2) in method <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r4 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r20 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getMessage()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r20 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getMessage()>()
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader) in method <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r4 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r20 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getMessage()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r20 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getMessage()>()
[main] INFO soot.jimple.infoflow.Infoflow - - specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS) in method <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = tmp$1145315755
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> tmp$297167540 = (com.puppycrawl.tools.checkstyle.api.AuditListener) listener
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return tmp$297167540
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> c = staticinvoke <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>(config, fname#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>(aNosy)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(aListener)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r4 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r20 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getMessage()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r20 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getMessage()>()
[main] INFO soot.jimple.infoflow.Infoflow - The sink stripped = specialinvoke this.<com.puppycrawl.tools.checkstyle.Checker: java.lang.String getStrippedFileName(java.lang.String)>(aFileName) in method <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2) in method <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r8 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mFileSetChecks>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z3 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z3 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r16 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r2 = this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.api.FilterSet mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r0 = this.<com.puppycrawl.tools.checkstyle.api.FilterSet: java.util.Set mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> stripped = specialinvoke this.<com.puppycrawl.tools.checkstyle.Checker: java.lang.String getStrippedFileName(java.lang.String)>(aFileName)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> stripped = specialinvoke this.<com.puppycrawl.tools.checkstyle.Checker: java.lang.String getStrippedFileName(java.lang.String)>(aFileName)
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader) in method <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>(aConfig)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void finishLocalSetup()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.ModuleFactory mModuleFactory>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $r3 != null goto tmp$728286990 = new com.puppycrawl.tools.checkstyle.DefaultContext
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke tmp$728286990.<com.puppycrawl.tools.checkstyle.DefaultContext: void <init>()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> packageNames#2 = tmp$728286990
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.api.Context mChildContext> = packageNames#2
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> stripped = specialinvoke this.<com.puppycrawl.tools.checkstyle.Checker: java.lang.String getStrippedFileName(java.lang.String)>(aFileName)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> stripped = specialinvoke this.<com.puppycrawl.tools.checkstyle.Checker: java.lang.String getStrippedFileName(java.lang.String)>(aFileName)
[main] INFO soot.jimple.infoflow.Infoflow - - specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS) in method <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = tmp$1145315755
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> tmp$297167540 = (com.puppycrawl.tools.checkstyle.api.AuditListener) listener
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return tmp$297167540
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> c = staticinvoke <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>(config, fname#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>(aNosy)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(aListener)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> stripped = specialinvoke this.<com.puppycrawl.tools.checkstyle.Checker: java.lang.String getStrippedFileName(java.lang.String)>(aFileName)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> stripped = specialinvoke this.<com.puppycrawl.tools.checkstyle.Checker: java.lang.String getStrippedFileName(java.lang.String)>(aFileName)
[main] INFO soot.jimple.infoflow.Infoflow - The sink $r1 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>() in method <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2) in method <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r1 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r1 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader) in method <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r1 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r1 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - - specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS) in method <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = tmp$1145315755
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> tmp$297167540 = (com.puppycrawl.tools.checkstyle.api.AuditListener) listener
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return tmp$297167540
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> c = staticinvoke <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>(config, fname#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>(aNosy)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(aListener)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r1 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r1 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - The sink message = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getMessage()>() in method <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2) in method <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> severityLevel = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.SeverityLevel: boolean equals(java.lang.Object)>(severityLevel)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 != 0 goto return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> message = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getMessage()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> message = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getMessage()>()
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader) in method <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> severityLevel = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.SeverityLevel: boolean equals(java.lang.Object)>(severityLevel)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 != 0 goto return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> message = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getMessage()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> message = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getMessage()>()
[main] INFO soot.jimple.infoflow.Infoflow - - specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS) in method <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = tmp$1145315755
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> tmp$297167540 = (com.puppycrawl.tools.checkstyle.api.AuditListener) listener
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return tmp$297167540
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> c = staticinvoke <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>(config, fname#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>(aNosy)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(aListener)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> severityLevel = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = virtualinvoke $r0.<com.puppycrawl.tools.checkstyle.api.SeverityLevel: boolean equals(java.lang.Object)>(severityLevel)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 != 0 goto return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> message = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getMessage()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> message = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getMessage()>()
[main] INFO soot.jimple.infoflow.Infoflow - The sink packageNames = staticinvoke <com.puppycrawl.tools.checkstyle.PackageNamesLoader: java.util.Set getPackageNames(java.lang.ClassLoader)>($r12) in method <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader) in method <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>(aConfig)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void finishLocalSetup()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> packageNames = staticinvoke <com.puppycrawl.tools.checkstyle.PackageNamesLoader: java.util.Set getPackageNames(java.lang.ClassLoader)>($r12)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> packageNames = staticinvoke <com.puppycrawl.tools.checkstyle.PackageNamesLoader: java.util.Set getPackageNames(java.lang.ClassLoader)>($r12)
[main] INFO soot.jimple.infoflow.Infoflow - The sink $r12 = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: org.apache.commons.logging.Log getExceptionLogger()>() in method <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2) in method <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r12 = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: org.apache.commons.logging.Log getExceptionLogger()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r12 = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: org.apache.commons.logging.Log getExceptionLogger()>()
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader) in method <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r12 = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: org.apache.commons.logging.Log getExceptionLogger()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r12 = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: org.apache.commons.logging.Log getExceptionLogger()>()
[main] INFO soot.jimple.infoflow.Infoflow - The sink $r29 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getSourceName()>() in method <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2) in method <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>(fileName)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r1 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void fileStarted(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void fileStarted(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getFileName()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void fileStarted(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r4 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: java.lang.String encode(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: java.lang.String encode(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i0 = virtualinvoke aValue.<java.lang.String: int length()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: java.lang.String encode(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if i >= $i0 goto $r1 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: java.lang.String encode(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i = i + 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: java.lang.String encode(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if i >= $i0 goto $r1 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: java.lang.String encode(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: boolean isReference(java.lang.String)>($r6)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: java.lang.String encode(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r29 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getSourceName()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r29 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getSourceName()>()
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader) in method <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>(fileName)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r1 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void fileStarted(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void fileStarted(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getFileName()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void fileStarted(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r4 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: java.lang.String encode(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: java.lang.String encode(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i0 = virtualinvoke aValue.<java.lang.String: int length()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: java.lang.String encode(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if i >= $i0 goto $r1 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: java.lang.String encode(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i = i + 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: java.lang.String encode(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if i >= $i0 goto $r1 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: java.lang.String encode(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: boolean isReference(java.lang.String)>($r6)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: java.lang.String encode(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r29 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getSourceName()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r29 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getSourceName()>()
[main] INFO soot.jimple.infoflow.Infoflow - - specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS) in method <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = tmp$1145315755
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> tmp$297167540 = (com.puppycrawl.tools.checkstyle.api.AuditListener) listener
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return tmp$297167540
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> c = staticinvoke <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>(config, fname#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>(aNosy)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(aListener)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>(fileName)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r1 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void fileStarted(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void fileStarted(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getFileName()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void fileStarted(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r4 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: java.lang.String encode(java.lang.String)>($r3)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: java.lang.String encode(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i0 = virtualinvoke aValue.<java.lang.String: int length()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: java.lang.String encode(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if i >= $i0 goto $r1 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: java.lang.String encode(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i = i + 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: java.lang.String encode(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if i >= $i0 goto $r1 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.String toString()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: java.lang.String encode(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = virtualinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: boolean isReference(java.lang.String)>($r6)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: java.lang.String encode(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return $r1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r29 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getSourceName()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r29 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: java.lang.String getSourceName()>()
[main] INFO soot.jimple.infoflow.Infoflow - The sink $r9 = virtualinvoke $r8.<com.puppycrawl.tools.checkstyle.api.SeverityLevel: java.lang.String getName()>() in method <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader) in method <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>(aConfig)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void finishLocalSetup()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.ModuleFactory mModuleFactory>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $r3 != null goto tmp$728286990 = new com.puppycrawl.tools.checkstyle.DefaultContext
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r8 = this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.api.SeverityLevel mSeverityLevel>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r9 = virtualinvoke $r8.<com.puppycrawl.tools.checkstyle.api.SeverityLevel: java.lang.String getName()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r9 = virtualinvoke $r8.<com.puppycrawl.tools.checkstyle.api.SeverityLevel: java.lang.String getName()>()
[main] INFO soot.jimple.infoflow.Infoflow - The sink $i5 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>() in method <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2) in method <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r2 = this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.api.FilterSet mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r0 = this.<com.puppycrawl.tools.checkstyle.api.FilterSet: java.util.Set mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = interfaceinvoke filter.<com.puppycrawl.tools.checkstyle.api.Filter: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(aEvent)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i5 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i5 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>()
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader) in method <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r2 = this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.api.FilterSet mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r0 = this.<com.puppycrawl.tools.checkstyle.api.FilterSet: java.util.Set mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = interfaceinvoke filter.<com.puppycrawl.tools.checkstyle.api.Filter: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(aEvent)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i5 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i5 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>()
[main] INFO soot.jimple.infoflow.Infoflow - - specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS) in method <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = tmp$1145315755
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> tmp$297167540 = (com.puppycrawl.tools.checkstyle.api.AuditListener) listener
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return tmp$297167540
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> c = staticinvoke <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>(config, fname#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>(aNosy)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(aListener)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i5 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.DefaultLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i5 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getColumn()>()
[main] INFO soot.jimple.infoflow.Infoflow - The sink stripped = specialinvoke this.<com.puppycrawl.tools.checkstyle.Checker: java.lang.String getStrippedFileName(java.lang.String)>(aFileName) in method <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2) in method <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>(fileName)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> stripped = specialinvoke this.<com.puppycrawl.tools.checkstyle.Checker: java.lang.String getStrippedFileName(java.lang.String)>(aFileName)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> stripped = specialinvoke this.<com.puppycrawl.tools.checkstyle.Checker: java.lang.String getStrippedFileName(java.lang.String)>(aFileName)
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader) in method <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>(aConfig)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void finishLocalSetup()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.ModuleFactory mModuleFactory>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $r3 != null goto tmp$728286990 = new com.puppycrawl.tools.checkstyle.DefaultContext
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke tmp$728286990.<com.puppycrawl.tools.checkstyle.DefaultContext: void <init>()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> packageNames#2 = tmp$728286990
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.api.Context mChildContext> = packageNames#2
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void finishLocalSetup()>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>(fileName)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> stripped = specialinvoke this.<com.puppycrawl.tools.checkstyle.Checker: java.lang.String getStrippedFileName(java.lang.String)>(aFileName)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> stripped = specialinvoke this.<com.puppycrawl.tools.checkstyle.Checker: java.lang.String getStrippedFileName(java.lang.String)>(aFileName)
[main] INFO soot.jimple.infoflow.Infoflow - - specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS) in method <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = tmp$1145315755
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> tmp$297167540 = (com.puppycrawl.tools.checkstyle.api.AuditListener) listener
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return tmp$297167540
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> c = staticinvoke <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>(config, fname#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>(aNosy)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(aListener)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>(fileName)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> stripped = specialinvoke this.<com.puppycrawl.tools.checkstyle.Checker: java.lang.String getStrippedFileName(java.lang.String)>(aFileName)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireFileStarted(java.lang.String)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> stripped = specialinvoke this.<com.puppycrawl.tools.checkstyle.Checker: java.lang.String getStrippedFileName(java.lang.String)>(aFileName)
[main] INFO soot.jimple.infoflow.Infoflow - The sink $r20 = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: org.apache.commons.logging.Log getExceptionLogger()>() in method <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2) in method <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r8 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mFileSetChecks>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z3 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z3 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r20 = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: org.apache.commons.logging.Log getExceptionLogger()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r20 = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: org.apache.commons.logging.Log getExceptionLogger()>()
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader) in method <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r8 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mFileSetChecks>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z3 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z3 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r20 = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: org.apache.commons.logging.Log getExceptionLogger()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r20 = staticinvoke <com.puppycrawl.tools.checkstyle.api.Utils: org.apache.commons.logging.Log getExceptionLogger()>()
[main] INFO soot.jimple.infoflow.Infoflow - The sink $r11 = virtualinvoke $r12.<com.puppycrawl.tools.checkstyle.api.SeverityLevel: java.lang.String getName()>() in method <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2) in method <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r2 = this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.api.FilterSet mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r0 = this.<com.puppycrawl.tools.checkstyle.api.FilterSet: java.util.Set mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r4 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r11 = virtualinvoke $r12.<com.puppycrawl.tools.checkstyle.api.SeverityLevel: java.lang.String getName()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r11 = virtualinvoke $r12.<com.puppycrawl.tools.checkstyle.api.SeverityLevel: java.lang.String getName()>()
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader) in method <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r8 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mFileSetChecks>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z3 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z3 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke fileMessages.<java.util.SortedSet: boolean addAll(java.util.Collection)>($r10)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke aErrors.<java.util.SortedSet: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r4 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r11 = virtualinvoke $r12.<com.puppycrawl.tools.checkstyle.api.SeverityLevel: java.lang.String getName()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r11 = virtualinvoke $r12.<com.puppycrawl.tools.checkstyle.api.SeverityLevel: java.lang.String getName()>()
[main] INFO soot.jimple.infoflow.Infoflow - - specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS) in method <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = tmp$1145315755
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> tmp$297167540 = (com.puppycrawl.tools.checkstyle.api.AuditListener) listener
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return tmp$297167540
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> c = staticinvoke <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>(config, fname#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>(aNosy)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(aListener)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return 0
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r4 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r11 = virtualinvoke $r12.<com.puppycrawl.tools.checkstyle.api.SeverityLevel: java.lang.String getName()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r11 = virtualinvoke $r12.<com.puppycrawl.tools.checkstyle.api.SeverityLevel: java.lang.String getName()>()
[main] INFO soot.jimple.infoflow.Infoflow - The sink i$#4 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter: int getCount()>() in method <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2) in method <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r8 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mFileSetChecks>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z3 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z3 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r16 = virtualinvoke this.<java.lang.Object: java.lang.Class getClass()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$#4 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter: int getCount()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$#4 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter: int getCount()>()
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader) in method <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$#4 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter: int getCount()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$#4 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter: int getCount()>()
[main] INFO soot.jimple.infoflow.Infoflow - The sink $r1 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>() in method <com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2) in method <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r2 = this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.api.FilterSet mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r0 = this.<com.puppycrawl.tools.checkstyle.api.FilterSet: java.util.Set mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = interfaceinvoke filter.<com.puppycrawl.tools.checkstyle.api.Filter: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(aEvent)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r1 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r1 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader) in method <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r2 = this.<com.puppycrawl.tools.checkstyle.Checker: com.puppycrawl.tools.checkstyle.api.FilterSet mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = virtualinvoke $r2.<com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r0 = this.<com.puppycrawl.tools.checkstyle.api.FilterSet: java.util.Set mFilters>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z0 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z0 == 0 goto return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z1 = interfaceinvoke filter.<com.puppycrawl.tools.checkstyle.api.Filter: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(aEvent)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.FilterSet: boolean accept(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return 1
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z1 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r1 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r1 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - - specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS) in method <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = tmp$1145315755
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> tmp$297167540 = (com.puppycrawl.tools.checkstyle.api.AuditListener) listener
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return tmp$297167540
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> c = staticinvoke <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>(config, fname#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>(aNosy)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(aListener)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = (com.puppycrawl.tools.checkstyle.api.AuditListener) $r4
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r1 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r1 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: com.puppycrawl.tools.checkstyle.api.SeverityLevel getSeverityLevel()>()
[main] INFO soot.jimple.infoflow.Infoflow - The sink $i0 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getLine()>() in method <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)> was called with values from the following sources:
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2) in method <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.api.AutomaticBean: void setupChild(com.puppycrawl.tools.checkstyle.api.Configuration)>(value#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.api.AutomaticBean: void configure(com.puppycrawl.tools.checkstyle.api.Configuration)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i0 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getLine()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i0 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getLine()>()
[main] INFO soot.jimple.infoflow.Infoflow - - virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader) in method <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void setModuleClassLoader(java.lang.ClassLoader)>(moduleClassLoader)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i0 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getLine()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i0 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getLine()>()
[main] INFO soot.jimple.infoflow.Infoflow - - specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS) in method <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 	on Path: 
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> specialinvoke this.<com.puppycrawl.tools.checkstyle.XMLLogger: void setOutputStream(java.io.OutputStream)>(aOS)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void <init>(java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> listener = tmp$1145315755
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> tmp$297167540 = (com.puppycrawl.tools.checkstyle.api.AuditListener) listener
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.api.AuditListener createListener(org.apache.commons.cli.CommandLine,java.io.OutputStream,boolean)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return tmp$297167540
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> c = staticinvoke <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>(config, fname#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>(aNosy)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(aListener)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void addListener(com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: com.puppycrawl.tools.checkstyle.Checker createChecker(com.puppycrawl.tools.checkstyle.api.Configuration,com.puppycrawl.tools.checkstyle.api.AuditListener)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> return c
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Main: void main(java.lang.String[])>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> numErrs = virtualinvoke c.<com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>(e#2)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: int process(java.util.List)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> virtualinvoke this.<com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>(fileName, fileMessages)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $r3 = this.<com.puppycrawl.tools.checkstyle.Checker: java.util.List mListeners>
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> i$ = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $z2 = interfaceinvoke i$.<java.util.Iterator: boolean hasNext()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> if $z2 == 0 goto (branch)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.Checker: void fireErrors(java.lang.String,java.util.SortedSet)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> interfaceinvoke listener.<com.puppycrawl.tools.checkstyle.api.AuditListener: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>(evt)
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i0 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getLine()>()
[main] INFO soot.jimple.infoflow.Infoflow - 	 -> <com.puppycrawl.tools.checkstyle.XMLLogger: void addError(com.puppycrawl.tools.checkstyle.api.AuditEvent)>
[main] INFO soot.jimple.infoflow.Infoflow - 		 -> $i0 = virtualinvoke aEvt.<com.puppycrawl.tools.checkstyle.api.AuditEvent: int getLine()>()
